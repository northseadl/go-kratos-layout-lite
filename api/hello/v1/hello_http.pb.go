// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type HelloHTTPServer interface {
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
	Hi(context.Context, *HiRequest) (*HiReply, error)
}

func RegisterHelloHTTPServer(s *http.Server, srv HelloHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/hello", _Hello_Hello0_HTTP_Handler(srv))
	r.POST("/v1/hello", _Hello_Hi0_HTTP_Handler(srv))
}

func _Hello_Hello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.hello.v1.Hello/Hello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Hello_Hi0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.hello.v1.Hello/Hi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hi(ctx, req.(*HiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HiReply)
		return ctx.Result(200, reply)
	}
}

type HelloHTTPClient interface {
	Hello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
	Hi(ctx context.Context, req *HiRequest, opts ...http.CallOption) (rsp *HiReply, err error)
}

type HelloHTTPClientImpl struct {
	cc *http.Client
}

func NewHelloHTTPClient(client *http.Client) HelloHTTPClient {
	return &HelloHTTPClientImpl{client}
}

func (c *HelloHTTPClientImpl) Hello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/v1/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.hello.v1.Hello/Hello"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloHTTPClientImpl) Hi(ctx context.Context, in *HiRequest, opts ...http.CallOption) (*HiReply, error) {
	var out HiReply
	pattern := "/v1/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.hello.v1.Hello/Hi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
